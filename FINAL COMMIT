import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
# loading the data from csv file to a pandas Dataframe
raw_train = pd.read_csv('/content/train.csv')
print(raw_train)
# replace the null values with a null string
train = raw_train.where((pd.notnull(raw_train)),'')
# checking the number of rows and columns in the dataframe
train.shape
# label spam mail as 0;  ham mail as 1;

train.loc[train['Category'] == 'spam', 'Category',] = 0
train.loc[train['Category'] == 'ham', 'Category',] = 1
# separating the data as texts and label

X = train['Message']

Y = train['Category']
print(X)
print(Y)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)
print(X.shape)
print(X_train.shape)
print(X_test.shape)
# transform the text data to feature vectors that can be used as input to the Logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True')

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')
print(X_train)
print(X_train_features)

'''Training model'''

'''Logistic Regression'''
model = LogisticRegression()
# training the Logistic Regression model with the training data
model.fit(X_train_features, Y_train)
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
 '''Evaluating the trained model'''
 
 # prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)
print('Accuracy on training data : ', accuracy_on_training_data)
# prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)
print('Accuracy on test data : ', accuracy_on_test_data)
input_train = ["Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat..."]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_train)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')
import requests
def read():
    base_url= "https://api.telegram.org/bot5656861996:AAGTuyrBF5TxRFSKwLRbi3X6v8WijA57fcw/getUpdates"
    parameters = {
        # "offset" : "118525372",
        "limit ": "1"
    }
    resp = requests.get(base_url,data = parameters)
    data = resp.json()

    for result in data["result"]:
      input_train = [result["message"]["text"]]
      # convert text to feature vectors
      input_data_features = feature_extraction.transform(input_train)

      # making prediction

      prediction = model.predict(input_data_features)
      if (prediction[0]==1):
        print('Ham mail')

      else:
        sendmsg()
        print('Spam mail')
        
    # print(prediction)
    # print(result["message"]["text"])

def sendmsg():
  base_url= "https://api.telegram.org/bot5656861996:AAGTuyrBF5TxRFSKwLRbi3X6v8WijA57fcw/sendMessage"
  parameters = {
      "chat_id" : "-809822323",
      "text" : "warning no spamming"
  }
  resp = requests.get(base_url,data = parameters)
    
read()
import requests
base_url= "https://api.telegram.org/bot5656861996:AAGTuyrBF5TxRFSKwLRbi3X6v8WijA57fcw/sendMessage"
parameters = {
    "chat_id" : "-809822323",
    "text" : "warning no spamming"
}
resp = requests.get(base_url,data = parameters)
